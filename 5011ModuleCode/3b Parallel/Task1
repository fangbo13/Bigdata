Modifying PoolSize = 4 obviously takes less time than PoolSize = 2. At this point, there is a concrete experience of parallel computing. Reference data to learn MATLAB's parfor function and learn how MATLAB processes data in parallel.
An understanding of parfor. parfor splitting is parallel+for, which is parallel processing of for loops. For example, for sequential processing of I=1:150, parallel parfor processing can split the for loop into several smaller processing units that process different nodes at the same time. Processing unit 1 executes I=1:50, processing unit 2 executes I=50:100 and processing unit 3 executes I=100:150, and finally the results of the execution are combined to become the result of the parfor execution.
I wrote a section of code to test the performance of parfor, as follows:

Startup code:
function [pool] = startmatlabpool(size)
pool=[];
isstart = 0;
if isempty(gcp('nocreate'))==1
    isstart = 1;
end
if isstart==1
    if nargin==0
        pool=parpool('local');
    else
        try
            pool=parpool('local',size);%matlabpool('open','local',size);
        catch ce
            pool=parpool('local');%matlabpool('open','local');
            size = pool.NumWorkers;
            display(ce.message);
            display(strcat('restart. wrong  size=',num2str(size)));
        end
    end
else
    display('matlabpool has started');
    if nargin==1
        closematlabpool;
        startmatlabpool(size);
    else
        startmatlabpool();
    end
end


	Close code：
		function [] = closematlabpool
if isempty(gcp('nocreate'))==0
 		   delete(gcp('nocreate'));
end

	Test code：
		pool = startmatlabpool(4);
N=1000;
M=100;
data = cell(1,N);
for kk = 1:N
  		 	data{kk} = rand(M);
end
display(strcat('datasize:',num2str(N*M*M/1024/1024),'M doubles'));
tic;
parfor ii = 1:N
     		c1(:,ii) = eig(data{ii});
end
t1 = toc; 
display(strcat('parafor:',num2str(t1),'seconds'));
 
tic;
for ii = 1:N
     		c2(:,ii) = eig(data{ii});
end
t2 = toc; 
display(strcat('for:',num2str(t2),'seconds'));
 
closematlabpool;
、


	Result：
datasize:9.5367M doubles
parafor:1.6411seconds
for:3.908seconds
Parallel pool using the 'local' profile is shutting down.

What can be seen is that parfor is half as fast, but there is still a problem. If the back loop and the front loop are interrelated, similar to the Fibonacci sequence, then it seems that such a calculation would not work according to the parfor idea. Having looked up the information, I found that parfor can only handle unrelated loops. Therefore, in practice, it may only be useful to help understand the model and not really involve actual data analysis.
